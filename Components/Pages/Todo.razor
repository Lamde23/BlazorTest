@page "/todo"
@rendermode InteractiveServer
<PageTitle>To do Page</PageTitle>

@* 
Creating a To Do list: Title, description, due date and completed box 
Shown in a table and has CRUD abilities
-When Completed, updates amount To Do count, and strike throughs row
-Able to be filtered by title name or due date. 

*@

<h3>To Do List(@todoList.Count(t => !t.IsDone))</h3>

<ul>
    @foreach (var todo in todoList){
        <li>
            @todo.Title
            <input type="checkbox" @bind="todo.IsDone">
            @* <input @bind="todo.Title"> *@
        </li>
    }
</ul>

<table class="table">
    <thead>
        <tr>
            @* <th type="checkbox" @bing="todo.IsDone"> *@
            <th style="width: 50px;"></th>
            <th>Title</th>
            <th>Description</th>
            <th>Due Date</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var todo in todoList){
        <tr>
            <input type="checkbox" @bind="todo.IsDone"></input>
            <td>@todo.Title</td>
            <td>@todo.Description</td>
            <td>@todo.DueDate.ToString("dd-MM-yyyy")</td>
            <td><button @onclick="() => DeleteTodo(todo)">Delete</button> </td>
        </tr>
        }
    </tbody>
</table>

@* Create To Do*@
<ul>
    <p>Add a new to do item:</p>
    <li>Title: <input @bind="newTodoTitle" title="title"> </li>
    <li>Description: <input @bind="newTodoDescription" title="Description"> </li>
    <li>Date due: <input type="date" @bind="newTodoDate"></input> </li>
    <button @onclick="AddTodo">Add Todo</button>
    @if (isTitleEmpty){
        <p class="text-danger">Title is empty</p>
    }
</ul>

@code {
    List<TodoItem> todoList = new List<TodoItem>();
    string newTodoTitle = "";
    string newTodoDescription ="";
    DateTime newTodoDate = DateTime.Today;
    bool isTitleEmpty = false;
    public class TodoItem{
        public required string Title { get; set; }
        public bool IsDone { get; set; } = false;
        public string Description { get; set; } = "";
        public DateTime DueDate { get; set; } = DateTime.Today;
    }
    private void AddTodo(MouseEventArgs e)
    {
        if (!string.IsNullOrWhiteSpace(newTodoTitle)){
            todoList.Add(new TodoItem { 
                Title = newTodoTitle, 
                Description = newTodoDescription, 
                DueDate = newTodoDate,
            });
            newTodoTitle = "";
            newTodoDescription = "";
            newTodoDate = DateTime.Today;
            isTitleEmpty = false;
        } else {
            isTitleEmpty = true;
        }
    }
    private void DeleteTodo(TodoItem todo)
    {
        todoList.Remove(todo);
    }
    protected override void OnInitialized(){
        todoList.Add(new TodoItem
        {
            Title = "Buy groceries",
            Description = "Milk, Bread, Eggs",
            DueDate = DateTime.Now.AddDays(1)
        });
    }
}
